package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateStory is the resolver for the createStory field.
func (r *mutationResolver) CreateStory(ctx context.Context, inputStory model.NewStory) (*model.Story, error) {
	now := time.Now()
	story := &model.Story{
		ID:              uuid.NewString(),
		UserID:          inputStory.UserID,
		UserName:        inputStory.UserName,
		DateStory:       now.Format("2006-01-02 15:04:05"),
		ImageStory:      inputStory.ImageStory,
		TextStory:       inputStory.TextStory,
		FontStory:       inputStory.FontStory,
		BackgroundStory: inputStory.BackgroundStory,
		Privacy:         inputStory.Privacy,
	}

	return story, r.DB.Save(&story).Error
}

// DeleteStory is the resolver for the deleteStory field.
func (r *mutationResolver) DeleteStory(ctx context.Context, id string) (*model.Story, error) {
	var story *model.Story

	if err := r.DB.First(&story, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return story, r.DB.Delete(&story).Error
}

// GetStory is the resolver for the getStory field.
func (r *queryResolver) GetStory(ctx context.Context, id string) (*model.Story, error) {
	var story *model.Story
	return story, r.DB.First(&story, "id = ?", id).Error
}

// GetAllStory is the resolver for the getAllStory field.
func (r *queryResolver) GetAllStory(ctx context.Context, userID string) ([]*model.Story, error) {
	var stories []*model.Story

	threshold := time.Now().Add(-24 * time.Hour)

	err := r.DB.Where("user_id = ? AND date_story >= ?", userID, threshold.Format("2006-01-02 15:04:05")).
		Find(&stories).Error

	return stories, err
}

// GetUserStoryDistinct is the resolver for the getUserStoryDistinct field.
func (r *queryResolver) GetUserStoryDistinct(ctx context.Context) ([]*model.UserDistinct, error) {
	var userDistinct []*model.UserDistinct

	// Calculate the time threshold for stories within the last 24 hours
	threshold := time.Now().Add(-24 * time.Hour)

	if err := r.DB.Model(&model.Story{}).
		Select("user_id, user_name").
		Where("date_story >= ?", threshold.Format("2006-01-02 15:04:05")).
		Group("user_id, user_name").
		Find(&userDistinct).Error; err != nil {
		return nil, err
	}

	return userDistinct, nil
}
