package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateGroupMember is the resolver for the createGroupMember field.
func (r *mutationResolver) CreateGroupMember(ctx context.Context, inputGroupMember model.NewGroupMember) (*model.GroupMember, error) {
	groupMember := &model.GroupMember{
		ID:      uuid.NewString(),
		GroupID: inputGroupMember.GroupID,
		UserID:  inputGroupMember.UserID,
		Role:    inputGroupMember.Role,
	}

	return groupMember, r.DB.Save(&groupMember).Error
}

// DeleteGroupMember is the resolver for the deleteGroupMember field.
func (r *mutationResolver) DeleteGroupMember(ctx context.Context, id string) (*model.GroupMember, error) {
	var groupMember *model.GroupMember

	if err := r.DB.First(&groupMember, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return groupMember, r.DB.Delete(&groupMember).Error
}

// UpdateRoleMember is the resolver for the updateRoleMember field.
func (r *mutationResolver) UpdateRoleMember(ctx context.Context, groupID string, userID string, role string) (*model.GroupMember, error) {
	var groupMember *model.GroupMember

	if err := r.DB.First(&groupMember, "group_id = ? AND user_id = ?", groupID, userID).Error; err != nil {
		return nil, err
	}

	groupMember.Role = role
	if err := r.DB.Save(&groupMember).Error; err != nil {
		return nil, err
	}

	return groupMember, nil
}

// CreatePendingMember is the resolver for the createPendingMember field.
func (r *mutationResolver) CreatePendingMember(ctx context.Context, inputPendingMember model.NewPendingGroupMember) (*model.PendingGroupMember, error) {
	pendingMember := &model.PendingGroupMember{
		ID:      uuid.NewString(),
		GroupID: inputPendingMember.GroupID,
		UserID:  inputPendingMember.UserID,
	}

	return pendingMember, r.DB.Save(&pendingMember).Error
}

// DeletePendingMember is the resolver for the deletePendingMember field.
func (r *mutationResolver) DeletePendingMember(ctx context.Context, id string) (*model.PendingGroupMember, error) {
	var pendingGroupMember *model.PendingGroupMember

	if err := r.DB.First(&pendingGroupMember, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return pendingGroupMember, r.DB.Delete(&pendingGroupMember).Error
}

// GetAllMemberByGroupID is the resolver for the getAllMemberByGroupID field.
func (r *queryResolver) GetAllMemberByGroupID(ctx context.Context, groupID string) ([]*model.GroupMember, error) {
	var groupMembers []*model.GroupMember

	query := r.DB.Where("group_id = ?", groupID)

	if err := query.Find(&groupMembers).Error; err != nil {
		return nil, err
	}

	return groupMembers, nil
}

// GetAllPendingByUserID is the resolver for the getAllPendingByUserID field.
func (r *queryResolver) GetAllPendingByUserID(ctx context.Context, userID string) ([]*model.PendingGroupMember, error) {
	var pendingMembers []*model.PendingGroupMember

	query := r.DB.Where("user_id = ?", userID)

	if err := query.Find(&pendingMembers).Error; err != nil {
		return nil, err
	}

	return pendingMembers, nil
}
