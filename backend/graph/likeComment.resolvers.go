package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateLikeComment is the resolver for the createLikeComment field.
func (r *mutationResolver) CreateLikeComment(ctx context.Context, inputCommentLike model.NewLikeComment) (*model.LikeComment, error) {
	now := time.Now()
	likeComment := &model.LikeComment{
		ID:         uuid.NewString(),
		CommentID:  inputCommentLike.CommentID,
		UserID:     inputCommentLike.UserID,
		UserName:   inputCommentLike.UserName,
		CreateDate: now.Format("2006-01-02 15:04:05"),
	}

	return likeComment, r.DB.Save(&likeComment).Error
}

// DeleteLikeComment is the resolver for the deleteLikeComment field.
func (r *mutationResolver) DeleteLikeComment(ctx context.Context, commentID string, userID string) (*model.LikeComment, error) {
	var likeComment model.LikeComment
	err := r.DB.Model(&likeComment).
		Where("comment_id = ?", commentID).
		Where("user_id = ?", userID).
		First(&likeComment).Error

	if err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&likeComment).Error; err != nil {
		return nil, err
	}

	return &likeComment, nil
}

// CountAllLikeCommentByComment is the resolver for the countAllLikeCommentByComment field.
func (r *queryResolver) CountAllLikeCommentByComment(ctx context.Context, id string) (int, error) {
	var count int64
	err := r.DB.Model(model.LikeComment{}).
		Where("comment_id = ?", id).
		Count(&count).Error

	if err != nil {
		return 0, err
	}

	return int(count), nil
}

// CheckLikeCommentByComment is the resolver for the checkLikeCommentByComment field.
func (r *queryResolver) CheckLikeCommentByComment(ctx context.Context, commentID string, userID string) (bool, error) {
	var likeComment model.LikeComment
	err := r.DB.Model(&likeComment).
		Where("comment_id = ?", commentID).
		Where("user_id = ?", userID).
		First(&likeComment).Error

	if err != nil {
		return false, nil
	}

	return true, nil
}
