package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateLike is the resolver for the createLike field.
func (r *mutationResolver) CreateLike(ctx context.Context, inputLike model.NewLike) (*model.Like, error) {
	now := time.Now()
	like := &model.Like{
		ID:         uuid.NewString(),
		PostID:     inputLike.PostID,
		UserID:     inputLike.UserID,
		UserName:   inputLike.UserName,
		CreateDate: now.Format("2006-01-02 15:04:05"),
	}

	return like, r.DB.Save(&like).Error
}

// DeleteLike is the resolver for the deleteLike field.
func (r *mutationResolver) DeleteLike(ctx context.Context, postID string, userID string) (*model.Like, error) {
	var like model.Like
	err := r.DB.Model(&like).
		Where("post_id = ?", postID).
		Where("user_id = ?", userID).
		First(&like).Error

	if err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&like).Error; err != nil {
		return nil, err
	}

	return &like, nil
}

// GetAllLikeByPost is the resolver for the getAllLikeByPost field.
func (r *queryResolver) GetAllLikeByPost(ctx context.Context, id string) ([]*model.Like, error) {
	panic(fmt.Errorf("not implemented: GetAllLikeByPost - getAllLikeByPost"))
}

// CountAllLikeByPost is the resolver for the countAllLikeByPost field.
func (r *queryResolver) CountAllLikeByPost(ctx context.Context, id string) (int, error) {
	var count int64
	err := r.DB.Model(model.Like{}).
		Where("post_id = ?", id).
		Count(&count).Error

	if err != nil {
		return 0, err
	}

	return int(count), nil
}

// CheckLikeByPost is the resolver for the checkLikeByPost field.
func (r *queryResolver) CheckLikeByPost(ctx context.Context, postID string, userID string) (bool, error) {
	var like model.Like
	err := r.DB.Model(&like).
		Where("post_id = ?", postID).
		Where("user_id = ?", userID).
		First(&like).Error

	if err != nil {
		return false, nil
	}

	return true, nil
}
