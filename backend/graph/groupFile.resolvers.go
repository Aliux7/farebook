package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, inputFile model.NewGroupFile) (*model.GroupFile, error) {
	now := time.Now()
	groupFile := &model.GroupFile{
		ID:         uuid.NewString(),
		GroupID:    inputFile.GroupID,
		UserID:     inputFile.UserID,
		FileName:   inputFile.FileName,
		Type:       inputFile.Type,
		MediaURL:   inputFile.MediaURL,
		CreateDate: now.Format("2006-01-02 15:04:05"),
	}

	return groupFile, r.DB.Save(&groupFile).Error
}

// GetAllFilesByGroupID is the resolver for the getAllFilesByGroupID field.
func (r *queryResolver) GetAllFilesByGroupID(ctx context.Context, groupID string) ([]*model.GroupFile, error) {
	var files []*model.GroupFile
	if err := r.DB.Where("group_id = ?", groupID).Find(&files).Error; err != nil {
		return nil, err
	}

	return files, nil
}
