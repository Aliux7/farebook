package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, inputPost model.NewPost) (*model.Post, error) {
	now := time.Now()
	post := &model.Post{
		ID:       uuid.NewString(),
		UserID:   inputPost.UserID,
		UserName: inputPost.UserName,
		DatePost: now.Format("2006-01-02 15:04:05"),
		TextPost: inputPost.TextPost,
		Privacy:  inputPost.Privacy,
	}

	return post, r.DB.Save(&post).Error
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	var post *model.Post

	if err := r.DB.First(&post, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return post, r.DB.Delete(&post).Error
}

// GetPost is the resolver for the getPost field.
func (r *queryResolver) GetPost(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: GetPost - getPost"))
}

// GetAllPost is the resolver for the getAllPost field.
func (r *queryResolver) GetAllPost(ctx context.Context, id string, offset *int, limit *int) ([]*model.Post, error) {
	var posts []*model.Post

	actualOffset := 0
	if offset != nil {
		actualOffset = *offset
	}

	actualLimit := 10 // You can adjust this default value as needed
	if limit != nil {
		actualLimit = *limit
	}

	// Retrieve posts where user_id matches the given id
	return posts, r.DB.Where("user_id = ?", id).Offset(actualOffset).Limit(actualLimit).Find(&posts).Error
}

// SearchAllPost is the resolver for the searchAllPost field.
func (r *queryResolver) SearchAllPost(ctx context.Context, search string, offset *int, limit *int) ([]*model.Post, error) {
	var posts []*model.Post

	query := r.DB

	if search != "" {
		query = query.Where("LOWER(text_post) LIKE ?", "%"+strings.ToLower(search)+"%")
	}

	if offset != nil && *offset > 0 {
		query = query.Offset(*offset)
	}

	if limit != nil && *limit > 0 {
		query = query.Limit(*limit)
	}

	if err := query.Find(&posts).Error; err != nil {
		return nil, err
	}

	return posts, nil
}
