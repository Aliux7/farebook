package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"strings"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/Aliux7/WEB-KS-231/service"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, inputUser model.NewUser) (*model.User, error) {
	password, err := model.HashPassword(inputUser.Password)

	if err != nil {
		return nil, err
	}

	user := &model.User{
		ID:             uuid.NewString(),
		ProfilePicture: inputUser.ProfilePicture,
		FirstName:      inputUser.FirstName,
		SurName:        inputUser.SurName,
		Email:          inputUser.Email,
		Password:       password,
		Dob:            inputUser.Dob,
		Gender:         inputUser.Gender,
		Activate:       false,
	}

	return user, r.DB.Save(&user).Error
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, inputUser model.NewUser) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	password, err := model.HashPassword(inputUser.Password)

	if err != nil {
		return nil, err
	}

	user.ProfilePicture = inputUser.ProfilePicture
	user.FirstName = inputUser.FirstName
	user.SurName = inputUser.SurName
	user.Email = inputUser.Email
	user.Password = password
	user.Dob = inputUser.Dob
	user.Gender = inputUser.Gender
	return user, r.DB.Save(&user).Error
}

// UpdateProfilePicture is the resolver for the updateProfilePicture field.
func (r *mutationResolver) UpdateProfilePicture(ctx context.Context, id string, profilePicture string) (*model.User, error) {
	var user model.User // Remove the pointer here

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	user.ProfilePicture = profilePicture
	if err := r.DB.Save(&user).Error; err != nil {
		return nil, err
	}

	return &user, nil // Return the entire user object here
}

// UpdateActivate is the resolver for the updateActivate field.
func (r *mutationResolver) UpdateActivate(ctx context.Context, id string) (*string, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	user.Activate = true
	return &user.ID, r.DB.Save(&user).Error
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, email string, password string) (*string, error) {
	var user *model.User

	if err := r.DB.First(&user, "email = ?", email).Error; err != nil {
		return nil, err
	}

	passwordHash, err := model.HashPassword(password)

	if err != nil {
		return nil, err
	}

	user.Password = passwordHash
	return &user.ID, r.DB.Save(&user).Error
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User

	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return user, r.DB.Delete(&user).Error
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, credentials model.LoginCredentials) (string, error) {
	response, err := service.UserLogin(ctx, credentials.Email, credentials.Password)
	if err != nil {
		return "", err
	}

	if response != "" {
		token := response
		return token, nil
	}

	return "", nil
}

// CheckHashPassword is the resolver for the checkHashPassword field.
func (r *mutationResolver) CheckHashPassword(ctx context.Context, password string, hash string) (bool, error) {
	response := model.CheckPasswordHash(password, hash)

	return response, nil
}

// GetUserByToken is the resolver for the getUserByToken field.
func (r *mutationResolver) GetUserByToken(ctx context.Context, token string) (*model.User, error) {
	// Validate the JWT token
	parsedToken, err := service.JwtValidate(ctx, token)
	if err != nil {
		return nil, err
	}

	// Access the claims from the token
	if claims, ok := parsedToken.Claims.(*service.JwtCustom); ok && parsedToken.Valid {
		// Here, you can extract the user ID from the claims
		userID := claims.ID
		fmt.Println(userID)
		// Fetch the user from your data source using the user ID
		// For example:
		user, err := r.Query().GetUser(ctx, userID)
		if err != nil {
			return nil, err
		}

		return user, nil
	}

	return nil, fmt.Errorf("invalid JWT token")
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "id = ?", id).Error
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	var user *model.User
	return user, r.DB.First(&user, "email = ?", email).Error
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	var users []*model.User
	return users, r.DB.Find(&users).Error
}

// SearchAllUser is the resolver for the searchAllUser field.
func (r *queryResolver) SearchAllUser(ctx context.Context, search string) ([]*model.User, error) {
	var users []*model.User
	query := r.DB

	if search != "" {
		query = query.Where("LOWER(first_name) LIKE ?", "%"+strings.ToLower(search)+"%")
	}

	if err := query.Find(&users).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
