package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateNotification is the resolver for the createNotification field.
func (r *mutationResolver) CreateNotification(ctx context.Context, inputNotification model.NewNotification) (*model.Notification, error) {
	now := time.Now()
	notification := &model.Notification{
		ID:         uuid.NewString(),
		UserID:     inputNotification.UserID,
		Content:    inputNotification.Content,
		CreateDate: now.Format("2006-01-02 15:04:05"),
		Status:     inputNotification.Status,
	}

	return notification, r.DB.Save(&notification).Error
}

// UpdateNotifcation is the resolver for the updateNotifcation field.
func (r *mutationResolver) UpdateNotifcation(ctx context.Context, id string) (*model.Notification, error) {
	notification := &model.Notification{}
	result := r.DB.Model(notification).Where("id = ?", id).Update("status", "read")
	if result.Error != nil {
		return nil, result.Error
	}
	if result.RowsAffected == 0 {
		return nil, fmt.Errorf("notification not found")
	}
	return notification, nil
}

// CountAllNotificationByUser is the resolver for the countAllNotificationByUser field.
func (r *queryResolver) CountAllNotificationByUser(ctx context.Context, id string) (int, error) {
	var count int64 // Change the type to int64
	err := r.DB.Model(model.Notification{}).
		Where("user_id = ?", id).
		Where("status = ?", "unread").
		Count(&count).Error

	if err != nil {
		return 0, err
	}

	// Convert int64 to int before returning
	return int(count), nil
}

// GetAllNotificationByUser is the resolver for the getAllNotificationByUser field.
func (r *queryResolver) GetAllNotificationByUser(ctx context.Context, id string, all *bool) ([]*model.Notification, error) {
	var notifications []*model.Notification

	query := r.DB.Where("user_id = ?", id)

	if all != nil && !*all {
		query = query.Where("status = ?", "unread")
	}

	if err := query.Find(&notifications).Error; err != nil {
		return nil, err
	}

	return notifications, nil
}
