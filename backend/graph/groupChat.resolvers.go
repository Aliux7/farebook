package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateGroupChat is the resolver for the createGroupChat field.
func (r *mutationResolver) CreateGroupChat(ctx context.Context) (*model.GroupChat, error) {
	now := time.Now()
	groupChat := &model.GroupChat{
		ID:        uuid.NewString(),
		CreatedAt: now.Format("2006-01-02 15:04:05"),
	}

	return groupChat, r.DB.Save(&groupChat).Error
}

// CreateGroupChatMember is the resolver for the createGroupChatMember field.
func (r *mutationResolver) CreateGroupChatMember(ctx context.Context, inputGroupChatMember model.NewGroupChatMember) (*model.GroupChatMember, error) {
	now := time.Now()
	groupChatMember := &model.GroupChatMember{
		ID:        uuid.NewString(),
		ChatID:    inputGroupChatMember.ChatID,
		UserID:    inputGroupChatMember.UserID,
		CreatedAt: now.Format("2006-01-02 15:04:05"),
	}

	return groupChatMember, r.DB.Save(&groupChatMember).Error
}

// CreateGroupChatMessage is the resolver for the createGroupChatMessage field.
func (r *mutationResolver) CreateGroupChatMessage(ctx context.Context, inputGroupChatMessage model.NewGroupChatMessage) (*model.GroupChatMessage, error) {
	now := time.Now()
	groupChatMessage := &model.GroupChatMessage{
		ID:        uuid.NewString(),
		ChatID:    inputGroupChatMessage.ChatID,
		Sender:    inputGroupChatMessage.Sender,
		Content:   inputGroupChatMessage.Content,
		Timestamp: now.Format("2006-01-02 15:04:05"),
	}

	if err := r.DB.Save(&groupChatMessage).Error; err != nil {
		return nil, err
	}

	for _, conn := range r.Conns {
		fmt.Println(conn)
		err := conn.WriteJSON(&groupChatMessage)
		if err != nil {
			fmt.Println(err)
		}
	}

	return groupChatMessage, nil
}

// GetAllGroupMessageByChatID is the resolver for the getAllGroupMessageByChatID field.
func (r *queryResolver) GetAllGroupMessageByChatID(ctx context.Context, chatID string) ([]*model.GroupChatMessage, error) {
	var groupChatMessage []*model.GroupChatMessage
	err := r.DB.Where("chat_id = ?", chatID).Order("timestamp ASC").Find(&groupChatMessage).Error
	if err != nil {
		return nil, err
	}
	return groupChatMessage, nil
}

// GetAllGroupChatByUserID is the resolver for the getAllGroupChatByUserID field.
func (r *queryResolver) GetAllGroupChatByUserID(ctx context.Context, userID string) ([]*model.GroupChatMember, error) {
	var chatIDs []string
	err := r.DB.Model(&model.GroupChatMember{}).Where("user_id = ?", userID).Pluck("DISTINCT chat_id", &chatIDs).Error
	if err != nil {
		return nil, err
	}

	var groupChatMembers []*model.GroupChatMember
	err = r.DB.Where("chat_id IN (?)", chatIDs).Order("chat_id ASC").Find(&groupChatMembers).Error
	if err != nil {
		return nil, err
	}

	return groupChatMembers, nil
}
