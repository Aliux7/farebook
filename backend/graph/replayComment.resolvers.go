package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"time"

	"github.com/Aliux7/WEB-KS-231/graph/model"
	"github.com/google/uuid"
)

// CreateReplayComment is the resolver for the createReplayComment field.
func (r *mutationResolver) CreateReplayComment(ctx context.Context, inputReplayComment model.NewReplayComment) (*model.ReplayComment, error) {
	now := time.Now()

	replyComment := &model.ReplayComment{
		ID:         uuid.NewString(),
		CommentID:  inputReplayComment.CommentID,
		UserID:     inputReplayComment.UserID,
		UserName:   inputReplayComment.UserName,
		Content:    inputReplayComment.Content,
		CreateDate: now.Format("2006-01-02 15:04:05"),
	}

	return replyComment, r.DB.Save(&replyComment).Error
}

// GetAllReplayCommentByComment is the resolver for the getAllReplayCommentByComment field.
func (r *queryResolver) GetAllReplayCommentByComment(ctx context.Context, id string) ([]*model.ReplayComment, error) {
	var replayComments []*model.ReplayComment
	err := r.DB.Where("comment_id = ?", id).Find(&replayComments).Error
	if err != nil {
		return nil, err
	}
	return replayComments, nil
}

// CountAllReplayCommentByComment is the resolver for the countAllReplayCommentByComment field.
func (r *queryResolver) CountAllReplayCommentByComment(ctx context.Context, id string) (int, error) {
	panic(fmt.Errorf("not implemented: CountAllReplayCommentByComment - countAllReplayCommentByComment"))
}
